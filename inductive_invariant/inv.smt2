(define-fun assumption.0 ((RTL.reg_0_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (= ((_ extract 1 1) RTL.reg_0_w_stage) RTL.id_ex_reg_wen) (not (= (concat (_ bv0 1) ((_ extract 1 1) RTL.reg_0_w_stage)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv0 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_0_w_stage (_ bv0 2))))))
(define-fun assumption.1 ((RTL.reg_1_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (= RTL.id_ex_reg_wen ((_ extract 1 1) RTL.reg_1_w_stage)) (not (= ((_ zero_extend 1) (_ bv1 1)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv1 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_1_w_stage (_ bv0 2))))))
(define-fun assumption.2 ((RTL.reg_1_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (not (= (_ bv0 1) RTL.id_ex_reg_wen)) (= (_ bv0 1) ((_ extract 1 1) RTL.reg_1_w_stage)))) (not (and (= RTL.ex_wb_reg_wen (_ bv0 1)) (= RTL.reg_1_w_stage (_ bv1 2))))))
(define-fun assumption.3 ((RTL.reg_1_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and true (or (= (_ bv0 1) ((_ extract 1 1) RTL.reg_1_w_stage)) (not (= (bvor ((_ zero_extend 1) ((_ extract 1 1) RTL.reg_1_w_stage)) (_ bv2 2)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv3 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_1_w_stage (_ bv1 2))))))
(define-fun assumption.4 ((RTL.reg_1_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and (and true (or (= (_ bv0 1) ((_ extract 1 1) RTL.reg_1_w_stage)) (not (= RTL.reg_1_w_stage RTL.id_ex_rd)))) (or (= (_ bv0 1) ((_ extract 1 1) RTL.reg_1_w_stage)) (not (= (_ bv2 2) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv2 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_1_w_stage (_ bv1 2))))))
(define-fun assumption.5 ((RTL.reg_2_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (or (not (= (_ bv1 1) RTL.id_ex_reg_wen)) (not (= ((_ extract 1 1) RTL.reg_2_w_stage) RTL.id_ex_reg_wen))) (not (= (concat (_ bv0 1) ((_ extract 1 1) RTL.reg_2_w_stage)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv1 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_2_w_stage (_ bv1 2))))))
(define-fun assumption.6 ((RTL.reg_2_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (= ((_ extract 1 1) RTL.reg_2_w_stage) RTL.id_ex_reg_wen) (not (= RTL.id_ex_rd (bvor ((_ zero_extend 1) ((_ extract 1 1) RTL.reg_2_w_stage)) (_ bv2 2)))))) (not (and (and (= RTL.ex_wb_rd (_ bv2 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_2_w_stage (_ bv0 2))))))
(define-fun assumption.7 ((RTL.reg_2_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (not (= (_ bv0 1) RTL.id_ex_reg_wen)) (= (_ bv0 1) ((_ extract 1 1) RTL.reg_2_w_stage)))) (not (and (= RTL.ex_wb_reg_wen (_ bv0 1)) (= RTL.reg_2_w_stage (_ bv1 2))))))
(define-fun assumption.8 ((RTL.reg_2_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (not (= (_ bv1 1) RTL.id_ex_reg_wen)) (not (= RTL.id_ex_rd (bvor ((_ zero_extend 1) ((_ extract 1 1) RTL.reg_2_w_stage)) (_ bv2 2)))))) (not (and (and (= RTL.ex_wb_rd (_ bv3 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_2_w_stage (_ bv1 2))))))
(define-fun assumption.9 ((RTL.reg_0_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and true (or (= (_ bv0 1) ((_ extract 1 1) RTL.reg_0_w_stage)) (not (= (_ bv2 2) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv2 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_0_w_stage (_ bv1 2))))))
(define-fun assumption.10 ((RTL.reg_0_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (or (= (_ bv0 1) RTL.id_ex_reg_wen) (not (= ((_ extract 1 1) RTL.reg_0_w_stage) RTL.id_ex_reg_wen))) (not (= (bvor ((_ zero_extend 1) ((_ extract 1 1) RTL.reg_0_w_stage)) (_ bv2 2)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv3 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_0_w_stage (_ bv1 2))))))
(define-fun assumption.11 ((RTL.reg_2_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (or (= (_ bv0 1) RTL.id_ex_reg_wen) (not (= RTL.id_ex_reg_wen ((_ extract 1 1) RTL.reg_2_w_stage)))) (not (= (_ bv0 2) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv0 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_2_w_stage (_ bv1 2))))))
(define-fun assumption.12 ((RTL.reg_0_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and (and true (or (= (= RTL.reg_0_w_stage (_ bv0 2)) (= RTL.id_ex_reg_wen (_ bv0 1))) (not (= (_ bv2 2) RTL.reg_0_w_stage)))) (or (= (_ bv0 1) ((_ extract 1 1) RTL.reg_0_w_stage)) (= (= RTL.reg_0_w_stage (_ bv0 2)) (= RTL.id_ex_reg_wen (_ bv0 1))))) (not (and (= RTL.ex_wb_reg_wen (_ bv0 1)) (= RTL.reg_0_w_stage (_ bv1 2))))))
(define-fun assumption.13 ((RTL.reg_0_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and true (or (= (_ bv0 1) ((_ extract 1 1) RTL.reg_0_w_stage)) (not (= ((_ zero_extend 1) (_ bv1 1)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv1 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_0_w_stage (_ bv1 2))))))
(define-fun assumption.14 ((RTL.reg_1_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and (and true (or (not (= (_ bv2 2) RTL.reg_1_w_stage)) (not (= (_ bv0 2) RTL.id_ex_rd)))) (or (not (= (_ bv0 2) RTL.id_ex_rd)) (not (= RTL.reg_1_w_stage (bvor ((_ zero_extend 1) ((_ extract 1 1) RTL.reg_1_w_stage)) (_ bv2 2)))))) (not (and (and (= RTL.ex_wb_rd (_ bv0 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_1_w_stage (_ bv1 2))))))
(define-fun assumption.15 ((RTL.reg_3_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and true (or (not (= (_ bv1 1) ((_ extract 1 1) RTL.reg_3_w_stage))) (not (= (concat (_ bv0 1) ((_ extract 1 1) RTL.reg_3_w_stage)) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv1 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_3_w_stage (_ bv1 2))))))
(define-fun assumption.16 ((RTL.reg_3_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and (and true (or (or (= (_ bv0 1) RTL.id_ex_reg_wen) (= (_ bv0 1) (ite (= RTL.reg_3_w_stage (_ bv0 2)) (_ bv1 1) (_ bv0 1)))) (not (= (_ bv3 2) RTL.id_ex_rd)))) (or (= RTL.id_ex_reg_wen ((_ extract 1 1) RTL.reg_3_w_stage)) (not (= (_ bv3 2) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv3 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_3_w_stage (_ bv0 2))))))
(define-fun assumption.17 ((RTL.reg_3_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.id_ex_reg_wen (_ BitVec 1))) Bool (and (and true (or (not (= (_ bv0 1) RTL.id_ex_reg_wen)) (= (_ bv0 1) ((_ extract 1 1) RTL.reg_3_w_stage)))) (not (and (= RTL.ex_wb_reg_wen (_ bv0 1)) (= RTL.reg_3_w_stage (_ bv1 2))))))
(define-fun assumption.18 ((RTL.reg_3_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and (and true (or (not (= (_ bv2 2) RTL.id_ex_rd)) (not (= (_ bv2 2) RTL.reg_3_w_stage)))) (or (not (= (_ bv2 2) RTL.id_ex_rd)) (not (= RTL.reg_3_w_stage (bvor ((_ zero_extend 1) ((_ extract 1 1) RTL.reg_3_w_stage)) (_ bv2 2)))))) (not (and (and (= RTL.ex_wb_rd (_ bv2 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_3_w_stage (_ bv1 2))))))
(define-fun assumption.19 ((RTL.reg_3_w_stage (_ BitVec 2)) (RTL.ex_wb_reg_wen (_ BitVec 1)) (RTL.ex_wb_rd (_ BitVec 2)) (RTL.id_ex_rd (_ BitVec 2))) Bool (and (and (and true (or (not (= (_ bv2 2) RTL.reg_3_w_stage)) (not (= (_ bv0 2) RTL.id_ex_rd)))) (or (not (= (_ bv1 1) ((_ extract 1 1) RTL.reg_3_w_stage))) (not (= (_ bv0 2) RTL.id_ex_rd)))) (not (and (and (= RTL.ex_wb_rd (_ bv0 2)) (= RTL.ex_wb_reg_wen (_ bv1 1))) (= RTL.reg_3_w_stage (_ bv1 2))))))
